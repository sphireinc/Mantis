name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  fmt:
    name: Go Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: fmt
        uses: danhunsaker/golang-github-actions@v1.3.0
        with:
          run: fmt
          token: ${{ secrets.GITHUB_TOKEN }}

  imports:
    name: Go Imports
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: imports
        uses: danhunsaker/golang-github-actions@v1.3.0
        with:
          run: imports
          token: ${{ secrets.GITHUB_TOKEN }}

  vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: vet
        uses: danhunsaker/golang-github-actions@v1.3.0
        with:
          run: vet
          token: ${{ secrets.GITHUB_TOKEN }}

  errcheck:
    name: Error Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: errcheck
        uses: danhunsaker/golang-github-actions@v1.3.0
        with:
          run: errcheck
          token: ${{ secrets.GITHUB_TOKEN }}

  shadow:
    name: Shadow Analyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: shadow
        uses: danhunsaker/golang-github-actions@v1.3.0
        with:
          run: shadow
          token: ${{ secrets.GITHUB_TOKEN }}

#  staticcheck:
#    name: Static Check
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: staticcheck
#        uses: danhunsaker/golang-github-actions@v1.3.0
#        with:
#          run: staticcheck
#          token: ${{ secrets.GITHUB_TOKEN }}

  misspell:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: misspell
        uses: danhunsaker/golang-github-actions@v1.3.0
        with:
          run: misspell
          token: ${{ secrets.GITHUB_TOKEN }}

#  ineffassign:
#    name: Ineffectual Assignments
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: ineffassign
#        uses: danhunsaker/golang-github-actions@v1.3.0
#        with:
#          run: ineffassign
#          token: ${{ secrets.GITHUB_TOKEN }}

#  gocyclo:
#    name: Cyclomatic Complexity
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: gocyclo
#        uses: danhunsaker/golang-github-actions@v1.3.0
#        with:
#          run: cyclo
#          token: ${{ secrets.GITHUB_TOKEN }}
#          flags: "-over 20"


  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.18.0-beta1' ]
    steps:
    - name: Checkout Code ${{ matrix.go }}
      uses: actions/checkout@v2

    - name: Setup Go ${{ matrix.go }}
      uses: actions/setup-go@v2
      with:
        stable: false
        go-version: ${{ matrix.go }}

    - name: Tidy and Vendor ${{ matrix.go }}
      run: |
        go get -u
        go mod tidy
        go mod vendor

    - name: Set Up GoTestFmt
      uses: GoTestTools/gotestfmt-action@v2
      with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: v2.0.0

    - name: Test ${{ matrix.go }}
      run: |
        set -euo pipefail
        go test -json -v ./... 2>&1 | tee /tmp/gotest.log | gotestfmt
        
    - name: Upload test log
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-log
        path: /tmp/gotest.log
        if-no-files-found: error

    - name: Archive markdown artifacts
      uses: actions/upload-artifact@v3
      with:
        name: archive-markdown
        path: |
          docs


    - name: Build Markdown Pages
      run: |
        go install github.com/princjef/gomarkdoc/cmd/gomarkdoc@latest
        gomarkdoc --output=docs/code/aws.md ./aws
        gomarkdoc --output=docs/code/byte.md ./byte
        gomarkdoc --output=docs/code/cache.md ./cache
        gomarkdoc --output=docs/code/data.md ./data
        gomarkdoc --output=docs/code/database.md ./database
        gomarkdoc --output=docs/code/date.md ./date
        gomarkdoc --output=docs/code/encoding.md ./encoding
        gomarkdoc --output=docs/code/encryption.md ./encryption
        gomarkdoc --output=docs/code/errors.md ./errors
        gomarkdoc --output=docs/code/helper.md ./helper
        gomarkdoc --output=docs/code/http.md ./http
        gomarkdoc --output=docs/code/log.md ./log
        gomarkdoc --output=docs/code/uuid.md ./uuid

    - name: Setup git Config
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<bot@github.com>"

    - name: commit
      run: |
        # Stage the file, commit and push
        git checkout gh-pages 2>/dev/null || git checkout -b gh-pages
        git add ./docs/code
        git commit -m "gh-pages gomarkdoc GHABOT"
        git push -f origin gh-pages
        git checkout master
